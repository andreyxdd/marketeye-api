name: manual cronjob

on:
  workflow_dispatch:
    inputs:
      target_date:
        description: "Target date, for which the calculations should be done. The required format is YYYY-MM-DD"
        required: false
        type: string
        default: "2025-05-01"
      additional_dev_receiver_email:
        description: "Another email to send the completion status of the cronjob"
        required: false

concurrency:
  group: read_markets_manual
  cancel-in-progress: true

jobs:
  job:
    runs-on: ubuntu-latest

    environment: marketeye-api

    env:
      API_KEY: ${{ secrets.API_KEY }}
      DEV_RECIEVER_EMAIL: ${{ secrets.DEV_RECIEVER_EMAIL }}
      ADDITIONAL_DEV_RECIEVER_EMAIL: ${{ inputs.additional_dev_receiver_email }}
      DEV_SENDER_EMAIL: ${{ secrets.DEV_SENDER_EMAIL }}
      DEV_SENDER_SERVICE: ${{ secrets.DEV_SENDER_SERVICE }}
      DEV_SENDER_SERVICE_PASSWORD: ${{ secrets.DEV_SENDER_SERVICE_PASSWORD }}
      DEV_SENDER_SERVICE_PORT: ${{ secrets.DEV_SENDER_SERVICE_PORT }}
      MI_BASE_URL: ${{ secrets.MI_BASE_URL }}
      MI_SP500_CODE: ${{ secrets.MI_SP500_CODE }}
      MI_SP500_DATASET: ${{ secrets.MI_SP500_DATASET }}
      MI_VIX_CODE: ${{ secrets.MI_VIX_CODE }}
      MI_VIX_DATASET: ${{ secrets.MI_VIX_DATASET }}
      MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
      MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
      PING_URL: ${{ secrets.PING_URL }}
      QUANDL_API_KEY: ${{ secrets.QUANDL_API_KEY }}
      QUANDL_RATE_LIMIT: ${{ secrets.QUANDL_RATE_LIMIT }}
      QUANDL_SLEEP_MINUTES: ${{ secrets.QUANDL_SLEEP_MINUTES }}
      USER_AGENT: ${{ secrets.USER_AGENT }}
      DATE_TO_SCRAPE: ${{ secrets.DATE_TO_SCRAPE }}
      YAHOO_BASE_FCF_URL: ${{ secrets.YAHOO_BASE_FCF_URL }}
      POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}

    steps:
      - name: Checkout repository content
        uses: actions/checkout@v2

      - name: Setup Python Version
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Set up cache for Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Reading Redis Credentials from Heroku CLI
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo "REDIS_URI=$(heroku config:get REDISCLOUD_URL -a marketeye-api)" >> $GITHUB_ENV

      - name: Update stocks 'analytics' collection
        run: python cronjob.py ${{ inputs.target_date }}
